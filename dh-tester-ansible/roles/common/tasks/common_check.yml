---
- name: Load OS specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "redhat-7.yml"
      paths:
        - ../vars

- name: Copy repo files
  file: path="/etc/yum.repos.d" state=absent
- file: path="/etc/yum.repos.d" state=directory
- template: src="{{ item }}.j2" dest="/etc/yum.repos.d/{{ item }}"
  with_items:
    - CentOS-IDC-Local.repo
    - EPEL-IDC-Local.repo
    - MariaDB-IDC-Local.repo
    - cdh-IDC-Local.repo
    - cloudera-manager.repo
    - cm-IDC-Local.repo

- name: clear cm installed files
  shell: echo "{{ item }}" | awk -F"," '{for(i=1; i<=NF; i++) print $i}' | xargs rm -rf
  with_items:
    - "{{ dfs_name_dir_list }}"
    - "{{ dfs_data_dir_list }}"
    - "{{ yarn_nodemanager_local_dirs }}"
    - "{{ zk_data_dir }}"
    - "{{ solr_data_dir }}"

#- name: clear cdh file
#  file: path={{ item }} state=absent
#  with_items:
#    - "/dfs"
#    - "/data"
#    - "/var/lib/zookeeper"
#    - "/var/lib/solr"

- name: clear nginx configuration for kdc ldap
  file: path=/etc/sssd/sssd.conf state=absent

- name: ensure required packages are installed
  yum:
    name: "{{ item }}"
    update_cache: yes
    state: latest
  with_items: "{{ packages|default([]) }}"

- name: increase entropy
  shell: rngd -o /dev/random -r /dev/urandom
  when: demo_run

- name: install jdk
  copy: src=files/jdk-8u60-linux-x64.rpm dest=/tmp/jdk-8u60-linux-x64.rpm
- yum: name=/tmp/jdk-8u60-linux-x64.rpm state=present
- file: path=/tmp/jdk-8u60-linux-x64.rpm state=absent

- name: update jar and set JAVA_HOME
  copy: src="files/{{item}}" dest="/usr/java/latest/jre/lib/security/{{item}}"
  with_items:
    - local_policy.jar
    - US_export_policy.jar
- lineinfile: dest=/etc/profile regexp="^JAVA_HOME=" line="export JAVA_HOME=/usr/java/latest"

- name: generate krb5.conf
  template: src="krb5conf.j2" dest=/etc/krb5.conf mode=0644

- name: ntp configurqtion for server and clients
  template: src=ntp.conf.j2 dest=/etc/ntp.conf
  when: ntp is defined
- template: src=ntp.conf.cli.j2 dest=/etc/ntp.conf
  when: ntp is not defined

- name: start ntp server and synchronize time from ntp server
  service: name=ntpd state=stopped enabled=no pattern='/ntpd'
- service: name=ntpd state=started enabled=yes pattern='/ntpd'
  when: ntp is defined
- shell: ntpdate {{ hostvars[ groups['ntp'][0] ].inventory_hostname }}
  when: ntp is not defined

#- cron: name="sync time" minute="*/5" job="/usr/sbin/ntpdate {{ hostvars[ groups['ntp'][0] ].inventory_hostname }}"
#  when: ntp is not defined

- name: Start ntp service for clients
  service: name=ntpd state=started enabled=yes pattern='/ntpd'
  when: ntp is not defined


---
- name: set swappiness to 1
  sysctl: name=vm.swappiness value=1 state=present ignoreerrors=yes

- name: disable Transparent Huge Pages until reboot
  shell: echo never > /sys/kernel/mm/transparent_hugepage/enabled && echo never > /sys/kernel/mm/transparent_hugepage/defrag
  ignore_errors: true

- name: disable selinux
  selinux: state=disabled

- name: disable firewalld
  service: name=firewalld state=stopped enabled=no

- name: Set hosts and hostname
  template: src="{{ item }}.j2" dest=/etc/{{ item }} mode=0644
  with_items:
   - hosts
   - hostname

- name: set timezone CST +0800
  shell: cp -f /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
  ignore_errors: true

- name: set timezone to Asia/Shanghai
  shell: timedatectl set-timezone Asia/Shanghai
  ignore_errors: true
  
- name: set nofile limits
  lineinfile: dest=/etc/security/limits.conf
              insertbefore="^ End of file"
              state=present
              line="{{ item }}"
  with_items:
    - "* soft nofile 65536"
    - "* hard nofile 65536"

- name: set nproc limits
  lineinfile: dest=/etc/security/limits.d/90-nproc.conf
              insertafter=EOF
              state=present
              create=yes
              line="{{ item }}"
              mode=0644
  with_items:
    - "* soft nproc 32768"
    - "* hard nproc 32768"

- name: restart machine
  shell: sleep 3 && reboot
  ignore_errors: true
  async: 1
  poll: 0

- name: wait to reboot 
  local_action:
    module: wait_for
      host={{ ansible_ssh_host }}
      port=22
      search_regex=OpenSSH
      delay=30
      state=started
      timeout=600

- name: check timezone
  shell: date -R
  register: var_reg
- assert: { that: "'0800' in var_reg.stdout" }

- name: check hostname
  shell: hostname
  register: var_reg
- assert: { that: "var_reg.stdout == '{{ inventory_hostname }}'" }

- name: check hosts
  shell: cat /etc/hosts
  register: var_reg
- assert: { that: "'{{ inventory_hostname }}' in var_reg.stdout" }

- name: check firewalld
  shell: systemctl status firewalld | grep "Active:" | awk '{print $2}'
  register: var_reg
- assert: { that: "var_reg.stdout == 'inactive'" }

- name: check selinux
  shell: systemctl status selinux | grep "Active:" | awk '{print $2}'
  register: var_reg
- assert: { that: "var_reg.stdout == 'inactive'" }

- name: check Transparent Huge Pages
  shell: cat /sys/kernel/mm/transparent_hugepage/enabled /sys/kernel/mm/transparent_hugepage/defrag | grep never | wc -l
  register: var_reg
- assert: { that: "var_reg.stdout == '2'" }

#- name: restart machine
#  shell: sleep 3 && reboot
#  ignore_errors: true
#  async: 1
#  poll: 0
#
#- name: wait to reboot 
#  local_action:
#    module: wait_for
#      host={{ ansible_ssh_host }}
#      port=22
#      delay=30
#      search_regex=OpenSSH
#      state=started